#+title: ðŸŒ¿ herbie ðŸŒ¿
#+subtitle: A herbstluftwm interactive environment thingy.
#+EXPORT_FILE_NAME: index.html
#+OPTIONS:   H:4 num:nil toc:2
#+setupfile: docs/theme-readtheorg-local.setup

* Intro

~herbie~ is helper for managing a [[https://herbstluftwm.org/][herbstluftwm]] interactive environment.

** Documentation

You are reading it.  This file is it.  You can see it rendered by
[[https://github.com/brettviren/herbie/blob/master/README.org][github]] or more beautifully by [[https://brettviren.github.io/herbie/][Emacs]] (with the help of [[https://github.com/fniessen/org-html-themes][fniessen's ReadTheOrg]])

** Usage

The ~herbie~ package provides a ~herbie~ command line program.  Run it to
print a brief help message:

#+begin_src shell :exports results :results output code :wrap "example"
herbie
#+end_src

#+RESULTS:
#+begin_example
Usage: herbie [OPTIONS] COMMAND [ARGS]...

Options:
  -h, --hc TEXT        Set the herbstclient executable name
  -u, --ui [term|gui]  Set user interface
  --help               Show this message and exit.

Commands:
  fini     Finish a task screen by closing all windows and removing the tag
  ifini    Interactively finish a task screen by closing all windows and...
  itask    Interactively figure how to fill screen with task layout
  load     Load a saved layout of the tag.
  loop     Run a looper
  loops    List known loopers
  save     Add the current layout to those saved on the tag.
  svgdump
  tags     Print tags one line at a time in order
  task     Fill screen with task layout
  tasks    List known tasks
  version  Print the version
  waction  Select and perform an action on a window
  wbring   Bring and focus a window on current tab
  wselect  Select and focus a window
#+end_example

The above is current as of ~herbie version~

#+begin_src shell :exports results :results output code :wrap "example"
herbie -u term version
#+end_src

#+RESULTS:
#+begin_example
0.0.0
#+end_example

As long as this version is held at ~0.0.0~ expect breaking changes.

** Concepts

~herbie~ functionality is organized into these concepts:

- tasks :: these are things you do, not herbie.  herbie will help you
  do your tasks by making it easy to set up and tear a task-specific
  tag.

- loops :: herbie can provide for ongoing behavior by issuing commands
  in response to herbstluftwm events aka hooks.

- commands :: these are on-shot manipulations, some using [[https://github.com/davatorium/rofi][rofi]] if
  interactive user choice is needed.

The remaining sections describe each concept and how to use its
features.

* Tasks

~herbie~'s concept of a "task" is not something ~herbie~ does but
something you do.  A task a herbstluftwm "tag" holding a certain
pre-defined layout of frames which is populated with specific windows.
Here is the result of a task called ~dev~.

[[file:docs/ss.png][file:docs/ss-thumb.png]]

The number of frames, their ratios and orientation and their window
contents are all predetermined.  With a single command one can remake
this layout and one can have multiple tags that use the layout.

** Assure a task

Running:

#+begin_example
  $ herbie task dev
#+end_example

produces a tag called ~dev~ with a certain layout of frames populated
with application windows based on the task configuration of the same
name.

#+begin_note
The ~herbie task~ command is /incrementally idempotent/.  You may run it
again and expect no change.  If you have switched to another tag,
rerunning will merely bring you to the task tag.  

If you have modified the layout of the task tag, rerunning will
attempt to restore the layout and window content.  In doing so, ~herbie~
will run an associated command if it finds an empty frame.  If a frame
has one or more windows, regardless of what application they are from,
~herbie~ will ignore it.  Thus if you have, say, added windows in a
frame, do not expect a subsequent ~herbie task~ to close them.
#+end_note

** Finishing a task

When ~herbie~ is asked to "finish" a task, all windows are closed and the
tag is removed (merged to another).

For example, let's do some development work and then get back to more
important matters.

#+begin_example
  $ herbie task dev

  ##(hack, test, commit, push)##

  $ herbie fini -g irc dev

  ##(chat, brag, lurk)##
#+end_example

** Defining tasks

Tasks are defined as a tree analogous to what you see from a
~herbstclient dump~.  Each leaf describing a frame with windows has a
command to run to provide the window and a set of X11 properties to
match the window.

#+begin_warning
Currently ~herbie~ lacks a task definition language and instead tasks
are hard-wired in the ~herbie.tasks~ Python module.  *This will change* so
don't get used to it.
#+end_warning

** Interactivity

~herbie~ is user-interactive.  The default UI is a GUI using [[https://github.com/davatorium/rofi][rofi]] and
~libnotify~.  An alternative UI uses the terminal.  To activate them,
add the global command line argument ~-u~ like in:

#+begin_example
  $ herbie tasks          # use default GUI
  $ herbie -u term tasks  # use terminal
#+end_example

Some ~herbie~ commands which take arguments have fully user-interactive
versions of the same name but with the prefix "~i~".  For example:

#+begin_example
  $ herbie itask
  $ herbie ifini
#+end_example

#+begin_note
These are usefully bound to keys as described below.
#+end_note

Both ~itask~ and ~ifini~ prompt the user for a task or tag and both
accepts an optional second tag in the response.  See their
documentation for how this optional second tag is interpreted.

As an example, assume we already have a tag named ~dev~ and want to make
a new tag using the ~dev~ task.  This is done using the ~herbie itask~
command (default UI uses the terminal) like:

#+begin_example
  $ herbie itask
  bweb
  dev
  dweb
  irc
  rss

  Task: dev dev2
#+end_example

This will produce the ~dev~ task not on tag ~dev~ but on tag ~dev2~.
Sometime later we may remove this ~dev2~ tag with ~ifini~.  In this
example we use the ~gui~ UI:

#+begin_example
  $ herbie ifini
  Tag to finish: dev2 dev
#+end_example

This closes out ~dev2~ and leaves us in the previously existing tag
called ~dev~.  If not final tag is given then the first tag which is not
the one to be finalize provides our landing spot.

** Calling from herbstluftwm

In your ~autostart~ you may have some keybindings to run ~herbie-dmenu~
like:

#+begin_example
hc keybind $Mod-i       spawn herbie itask 
hc keybind $Mod-Shift-i spawn herbie ifini
#+end_example


* Loops

A herbie loop is a long-running function that responds to the events
emitted by herbstluftwm.  Like "tasks" describe above one runs a loop
by naming it.  

** Available loops

The available loops are printed with:

#+begin_src shell :exports both :results output code :wrap "example"
herbie -u term loops
#+end_src

#+RESULTS:
#+begin_example
dump
stamp
stamp_switch
switch
#+end_example

- dump :: like ~herbstclient --idle~
- stamp :: add a ~my_focus_time~ to each client holding a time stamp of last focus
- switch :: attempt "Sawfish-like" window switching, it requires *stamp*.

** Running loops

A herbie loop may be run on the command line and will exit when a
~reload~ hook event is received from herbstlufwm.  To run herbie loops
add them at the end of your ~autostart~ file such as below where
~panel.sh~ is started.

#+begin_example
herbie loop stamp &
herbie loop switch &
#+end_example

* Commands

What remains are simply commands.  

** ~save~ and ~load~

~herbie~ can save and load frame/window layouts.  A ~herbie save~ will
store the result of ~herbstclient dump~ for the current layout to the
current tag.  And a ~herbie load~ can restore it.  A layout is stored by
name for later recall and ~herbie~ uses ~rofi~ to prompt for a new layout
name or reuse an old layout name.  For example:

[[file:loadsave.png]]


This shows four layouts which have been saved.  Layout names colored
in green (~lay4~) indicate they match the current layout while those in
red differ.  The icon represents the actual frames corresponding to
the stored layouts.  Selecting a red layout will then readjust the
current frames to match.

Example bindings

#+begin_example
  # Mnemonic: Emacs's k-kill / y-yank
  hc keybind $Mod-k spawn herbie save
  hc keybind $Mod-y spawn herbie load
#+end_example

** The "w" commands

Several command relate to windows and are reimplementations of
"classic" herbstlufwm scripts in ~herbie~ just to keep them together.

- waction :: a rofi "context" menu attached to the current window
- wbring :: bring some window from another tag to the current one
- wselect :: pick a window on current tag or all tags and make it focused, order choices by most recently to least recently used with current focus last

Example bindings

#+begin_example
  hc keybind $Mod-b        spawn herbie wbring
  hc keybind $Mod-n        spawn herbie wselect
  hc keybind $Mod-Shift-n  spawn herbie wselect -t all
  hc keybind $Mod-w        spawn herbie waction
#+end_example
