#+title: ðŸŒ¿ herbie ðŸŒ¿
#+subtitle: A herbstluftwm interactive environment thingy.
#+EXPORT_FILE_NAME: index.html
#+OPTIONS:   H:4 num:nil toc:2
#+setupfile: docs/theme-readtheorg-local.setup

* Intro

~herbie~ is helper for managing a [[https://herbstluftwm.org/][herbstluftwm]] interactive environment.
Interactivity is provide through keybindings and [[https://github.com/davatorium/rofi][rofi]] and the
[[https://github.com/miphreal/python-rofi-menu][rofi-menu]] Python interface.

** Documentation

You are reading it.  This file is it.  You can see it rendered by
[[https://github.com/brettviren/herbie/blob/master/README.org][github]] or more beautifully by [[https://brettviren.github.io/herbie/][Emacs]] (with the help of [[https://github.com/fniessen/org-html-themes][fniessen's ReadTheOrg]])

** Usage

The ~herbie~ package provides a ~herbie~ command line program.  Run it to
print a brief help message:

#+begin_src shell :exports results :results output code :wrap "example"
herbie
#+end_src

#+RESULTS:
#+begin_example
Usage: herbie [OPTIONS] COMMAND [ARGS]...

Options:
  -h, --hc TEXT        Set the herbstclient executable name
  -u, --ui [term|gui]  Set user interface
  -c, --config PATH    Set configuration file
  --help               Show this message and exit.

Commands:
  fini     Finish a task screen by closing all windows and removing the tag.
  ifini    Interactively finish a task screen by closing all windows and...
  itask    Interactively figure how to fill screen with task layout.
  layout   A rofi modi for loading, saving, dropping layouts.
  loop     Run a looper.
  loops    List known loopers.
  svgicon  Render a tag as an SVG.
  tags     Print tags one line at a time in order.
  task     Produce a predefined task layout.
  tasks    List tasks available in the configuration.
  version  Print the version.
  waction  Select and perform an action on a window.
  wbring   Bring a window to a tag.
  wselect  Select a window for focus.
#+end_example

The above is current as of ~herbie version~

#+begin_src shell :exports results :results output code :wrap "example"
herbie -u term version
#+end_src

#+RESULTS:
#+begin_example
0.0.0
#+end_example

As long as this version is held at ~0.0.0~ expect breaking changes.

** Concepts

~herbie~ functionality is organized into these concepts:

- tasks :: these are things you do, not herbie.  herbie will help you
  do your tasks by making it easy to set up and tear down a
  task-specific tag.

- layouts :: similar to tasks, they are like a "save game" for
  herbstluftwm.  They let you capture any number of snapshots of your
  tags' layouts so that you can return to any of them later.

- modi :: some interaction with ~herbie~ is to use it as a ~rofi~ /modi/,
  possibly with several together as a ~rofi~ /combi/.

- commands :: these are one-shot manipulations.

- loops :: herbie can provide for ongoing behavior by issuing commands
  in response to herbstluftwm events aka hooks.  Some concept
  implementations require some loops to be running.

The remaining sections describe each concept and how to use its
features.

* Tasks

~herbie~'s concept of a "task" is not something ~herbie~ does but
something *you* do.  A task a herbstluftwm "tag" holding a certain
pre-defined layout of frames which are populated with specific
application windows.  Here is the result of a task called ~dev~.

[[file:docs/ss.png][file:docs/ss-thumb.png]]

The number of frames, their ratios and orientation and their window
contents are all determined by user-provided configuration.  With a
single command one can remake this layout and one can have multiple
tags that use the layout.

** Assure a task

Running:

#+begin_example
  $ herbie task dev        (1)
  $ herbie task dev mydev  (2)
  $ herbie task dev mydev  (3)
#+end_example

1. Produce a tag called ~dev~ populated with a task of the same name.
2. As above but populate the task ~dev~ to the tag ~mydev~
3. Rerun and any changes to the layout or closed applications will be restored.

** Finishing a task

When ~herbie~ is asked to "finish" a task, all windows are closed and the
tag is removed (merged to another).

For example, let's do some development work and then get back to more
important matters.

#+begin_example
  $ herbie task dev

  ##(hack, test, commit, push)##

  $ herbie fini -g irc dev

  ##(chat, brag, lurk)##
#+end_example

** Defining tasks

Tasks are defined as a tree data structure using [[https://en.wikipedia.org/wiki/S-expression][sexp]] syntax in an
almost exactly identical form as one may see from the command
~herbstclient dump~.  The difference is that any place where you might
see a window ID (~0xdeadbeaf~) you may place zero or more herbie /window
names/ with which herbie may associate a /command/ to supply the window
and a number of attributes to form an herbstluftwm /rule/.

Tasks and windows are provided in a herbie configuration file.  An
example is provided in [[file:example.herbierc]].  The ~[tasks]~ section
holds a list of available tasks.  Again this is *not quite the output*
of ~herbstclient dump~:

#+begin_example
dweb = (clients window:firefox)
rss = (split horizontal:0.75:1
        (clients window:firefox)
        (split vertical:0.50:0
          (clients window:liferea)
          (clients )))
#+end_example

A window reference is satisfied by a section named like ~[window
<name>]~.  for example, the reference windows in the above example
tasks may be provided like:

#+begin_example
[window firefox]
title = Mozilla Firefox
command = firefox -P default-esr

[window liferea]
class = Liferea
command = liferea
#+end_example

In addition to ~command~ you may provide any /property/ supported by
herbstluftwm in forming the /condition/ of a /rule/

** Interactivity

~herbie~ is user-interactive.  The default UI is a GUI using [[https://github.com/davatorium/rofi][rofi]] and
~libnotify~.  An alternative UI uses the terminal.  To activate them,
add the global command line argument ~-u~ like in:

#+begin_example
  $ herbie tasks          # use default GUI
  $ herbie -u term tasks  # use terminal
#+end_example

#+begin_note
It is intended to transition from having ~herbie~ explicitly execute
~rofi~ to having ~herbie~ act as a ~rofi~ /modi/.  As of now there is a mix of
both interfaces.  See the section [[Modi]] below.
#+end_note

Some ~herbie~ commands which take arguments have fully user-interactive
versions of the same name but with the prefix "~i~".  For example:

#+begin_example
  $ herbie itask
  $ herbie ifini
#+end_example

#+begin_note
These are usefully bound to keys as described below.
#+end_note

Both ~itask~ and ~ifini~ prompt the user for a task or tag and both
accepts an optional second tag in the response.  See their
documentation for how this optional second tag is interpreted.

As an example, assume we already have a tag named ~dev~ and want to make
a new tag using the ~dev~ task.  This is done using the ~herbie itask~
command (default UI uses the terminal) like:

#+begin_example
  $ herbie itask
  bweb
  dev
  dweb
  irc
  rss

  Task: dev dev2
#+end_example

This will produce the ~dev~ task not on tag ~dev~ but on tag ~dev2~.
Sometime later we may remove this ~dev2~ tag with ~ifini~.  In this
example we use the ~gui~ UI:

#+begin_example
  $ herbie ifini
  Tag to finish: dev2 dev
#+end_example

This closes out ~dev2~ and leaves us in the previously existing tag
called ~dev~.  If not final tag is given then the first tag which is not
the one to be finalize provides our landing spot.

** Calling from herbstluftwm

In your ~autostart~ you may have some keybindings to run ~herbie-dmenu~
like:

#+begin_example
hc keybind $Mod-i       spawn herbie itask 
hc keybind $Mod-Shift-i spawn herbie ifini
#+end_example


* Loops

A herbie loop is a long-running function that responds to the events
emitted by herbstluftwm.  Like "tasks" describe above one runs a loop
by naming it.  

** Available loops

The available loops are printed with:

#+begin_src shell :exports both :results output code :wrap "example"
herbie -u term loops
#+end_src

#+RESULTS:
#+begin_example
dump
stamp
stamp_switch
switch
#+end_example

- dump :: like ~herbstclient --idle~
- stamp :: add a ~my_focus_time~ to each client and tag holding a time
  stamp of last focus.  Other parts of ~herbie~ relie on this running
  for ordering.
- switch :: attempt "Sawfish-like" window switching, it requires *stamp*.

** Running loops

A herbie loop may be run on the command line and will exit when a
~reload~ hook event is received from herbstlufwm.  To run herbie loops
add them at the end of your ~autostart~ file such as below where
~panel.sh~ is started.

#+begin_example
herbie loop stamp &
herbie loop switch &
#+end_example

* Modi

~herbie~ talks to ~rofi~ as a modi.  To summarize, here are some example
keybindings.

#+begin_example
hc keybind $Mod-w        spawn herbie waction

hc keybind $Mod-b        spawn rofi -modi "h:herbie wbring" -show h
hc keybind $Mod-n        spawn rofi -modi "h:herbie wselect" -show h
hc keybind $Mod-Shift-n  spawn rofi -modi "h:herbie wselect -t all" -show h
hc keybind $Mod-k        spawn rofi -modi "h:herbie layout -a save" -show h
hc keybind $Mod-y        spawn rofi -modi "h:herbie layout -a load" -show h 
hc keybind $Mod-l        spawn rofi -modi "h:herbie layout" -show h
#+end_example

- waction :: a window context menu (not yet /modi/-fied)
- wbring :: bring a window to the tag
- wselect :: give focus to a window
- layout :: operate on layouts, see section below

We may, of course, use ~rofi~ /combi/ to combine multiple herbie /modi/.
~herbie~ may also offer nested windows such as in the default call of
~herbie layout~.  More on layouts next.

* Layouts

Frame layouts can be saved to herbstlufwm tags for later loading back
to the screen.  This allows manual tweaks to be captured and easily
reapplied or cycled between them.  Layout storage in herbstlufwm is
transient and will not survive a restart, but does survive a reload.
Layout can also be explicitly removed from the store.

When layouts are displayed through ~rofi~ an SVG icon is created on the
fly from the layout tree in order to give you a hint, in addition to
the name you gave when saving them.  Here is an example ~rofi~ page
showing what is available for loading:

[[file:docs/layouts.png]]



* Commands

What remains are simply commands.  

** ~totag~

This is like ~hc use~ or ~hc use_index~ except if the requested tag is
already in focus then instead ~hc use_previous~ is called.  In the usual
~autostart~ loop which binds to numbers:

#+begin_example
tag_keys=( {1..9} 0 )
for tind in "${!tag_keys[@]}" 
do
    key="${tag_keys[$tind]}"
    hc keybind "$Mod-$key" spawn herbie totag "$tind"
done
#+end_example

** ~svgicon~

The ~svgicon~ command is not particularly meant to be used
interactively.  It simply creates an icon representing a tag.

#+begin_example
  $ herbie svgicon
  /home/bv/.icons/herbie-dev-100x100.svg
  # display ~/.icons/herbie-dev-100x100.svg
#+end_example

[[file:docs/herbie-dev-100x100.svg]]

